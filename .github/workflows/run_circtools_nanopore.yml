name: circtools nanopore (pip)

on:
  push:
  pull_request:

concurrency:
  group: ci-tests-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Main:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-13, macos-15, ubuntu-22.04, ubuntu-24.04 ]
        R: ['4.4.0', '4.5.1']
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    name: R ${{ matrix.R }} | Python ${{ matrix.python-version }} | ${{ matrix.os }}
    steps:
    - name: Create files
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Updating setuptools
      run: |
        python3 -m pip install -U pip setuptools

    - name: Installing circtools & Python dependencies
      run: |
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y \
            make g++ zlib1g-dev \
            libblas-dev libatlas-base-dev liblapack-dev \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libfontconfig1-dev libharfbuzz-dev libfribidi-dev \
            libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev
          python3 -m pip install ./
        elif [ "$RUNNER_OS" = "macOS" ]; then
          export SYSTEM_VERSION_COMPAT=1
          brew install make gcc zlib openssl@3 bedtools

          # Symlink brew gcc/g++ to standard names
          GCC_VERSION=$(brew list --versions gcc | awk '{print $2}' | cut -d. -f1)
          sudo ln -sf "$(brew --prefix)/bin/gcc-${GCC_VERSION}" /usr/local/bin/gcc
          sudo ln -sf "$(brew --prefix)/bin/g++-${GCC_VERSION}" /usr/local/bin/g++
          export CC=/usr/local/bin/gcc
          export CXX=/usr/local/bin/g++

          # Ensure headers/libs are visible
          export LDFLAGS="-L$(brew --prefix zlib)/lib -L$(brew --prefix openssl@3)/lib"
          export CPPFLAGS="-I$(brew --prefix zlib)/include -I$(brew --prefix openssl@3)/include"
          export PKG_CONFIG_PATH="$(brew --prefix zlib)/lib/pkgconfig"

          # Help pybedtools find the bedtools binary
          export PYBEDTOOLS_BEDTOOLS=/usr/local/bin/bedtools

          # Pre-install pybedtools binary wheel to avoid source build
          python3 -m pip install "pybedtools==0.12.0"
          python3 -m pip install ./

        else
          python3 -m pip install ./
        fi

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ matrix.R }}

    - name: Install R dependencies (with retry, prefer binaries)
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 40  
        max_attempts: 3
        retry_on: error
        command: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            UBUNTU_VERSION=$(lsb_release -cs)  # e.g. jammy, noble
            echo "options(repos = c(RSPM = sprintf('https://packagemanager.posit.co/cran/__linux__/%s/latest', '$UBUNTU_VERSION')))" >> ~/.Rprofile
          fi

          Rscript circtools/scripts/install_R_dependencies.R
      env:
        GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    - name: Checking library loading
      run: Rscript -e 'library(primex)'

    - name: Check if circtools starts
      run: |
        circtools --version
        which circtools

    - name: Fix zcat on macOS
      if: runner.os == 'macOS'
      run: |
        sudo ln -sf $(which gzcat) /usr/local/bin/zcat

    - name: Install bioinformatics dependencies (bedtools, pblat, samtools)
      run: |
        set -euxo pipefail

        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y make g++ zlib1g-dev wget samtools

          # bedtools 2.31.1
          wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz
          tar -xzf bedtools-2.31.1.tar.gz
          cd bedtools2
          make -j4
          sudo cp bin/* /usr/local/bin/
          cd ..

          # pblat (parallel BLAT)
          git clone --depth=1 https://github.com/icebert/pblat.git
          cd pblat
          make
          sudo cp pblat /usr/local/bin/
          cd ..

        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew update
          brew install make gcc wget zlib samtools openssl@3

          # Ensure consistent flags
          export LDFLAGS="-L$(brew --prefix zlib)/lib -L$(brew --prefix openssl@3)/lib"
          export CPPFLAGS="-I$(brew --prefix zlib)/include -I$(brew --prefix openssl@3)/include"

          # bedtools 2.31.1
          wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz
          tar -xzf bedtools-2.31.1.tar.gz
          cd bedtools2
          make -j4
          sudo cp bin/* /usr/local/bin/
          cd ..

          # pblat (with OpenSSL headers/libs)
          git clone --depth=1 https://github.com/icebert/pblat.git
          cd pblat
          make \
            CFLAGS="-I$(brew --prefix openssl@3)/include" \
            LDFLAGS="-L$(brew --prefix openssl@3)/lib" \
            LIBS="-lssl -lcrypto -lz -lpthread -lm"
          sudo cp pblat /usr/local/bin/
          cd ..
        else
          echo "Unsupported OS: $RUNNER_OS" >&2
          exit 1
        fi

    - name: Unpack test dataset
      run: |
        tar xvf ./tests/data/circtools_example.tar.bz2
        cd circtools_example
        if [ -f genome.fa.gz ]; then gunzip -f genome.fa.gz; fi
        if [ -f annotation.gtf.gz ]; then gunzip -f annotation.gtf.gz; fi
        ls -lh

    - name: Subsample nanopore data
      run: |
        cd circtools_example
        cp ../tests/data/human_nanopore.fastq.gz .
        zcat human_nanopore.fastq.gz | head -n 4000000 | gzip > human_nanopore_1M.fastq.gz
        ls -lh human_nanopore_1M.fastq.gz

    - name: Download reference data (nanopore)
      run: |
        cd circtools_example
        mkdir -p reference
        circtools nanopore \
          -d \
          -R reference \
          -C hg38

    - name: Run circtools nanopore (pip)
      run: |
        cd circtools_example
        mkdir -p nanopore_output
        circtools nanopore \
          -r \
          -s human_nanopore_1M.fastq.gz \
          -R reference \
          -C hg38 \
          -O nanopore_output/ \
          --threads 16

    - name: Checking generated output against master output
      run: |
        cd circtools_example
        cd nanopore_output
        ls -la
        wc -l *
        if [ "$RUNNER_OS" = "Linux" ]; then
          MASTER_DIR="../nanopore_master"
          diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
          sha1sum -c "$MASTER_DIR/sha1sums.txt"
        elif [ "$RUNNER_OS" = "macOS" ] && [ "${{ matrix.os }}" = "macos-13" ]; then
          MASTER_DIR="../nanopore_master"
          diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
          shasum -a 1 -c "$MASTER_DIR/sha1sums.txt"
        elif [ "$RUNNER_OS" = "macOS" ]; then
          MASTER_DIR="../nanopore_master"
          diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
          shasum -a 1 -c "$MASTER_DIR/sha1sums.txt"
        else
          echo "Unsupported OS: $RUNNER_OS" >&2
          exit 1
        fi
