name: circtools nanopore (pip)

on:
  push:
  pull_request:

concurrency:
  group: ci-tests-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Main:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-13, macos-15, ubuntu-22.04, ubuntu-24.04 ]
        R: ['4.4.0', '4.5.1']
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    name: R ${{ matrix.R }} | Python ${{ matrix.python-version }} | ${{ matrix.os }}
    steps:
    - name: Create files
      uses: actions/checkout@v4
      with:
       ref: ${{ github.ref_name }}
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Updating setuptools
      run: |
         python3 -m pip install -U pip setuptools
    - name: Installing circtools & Python dependencies
      run: |
         if [ "$RUNNER_OS" == "Linux"]; then
            apt-get update
            apt-get install -y make g++ zlib1g-dev 
            apt-get install libblas-dev libatlas-base-dev liblapack-dev -y
         fi
         if [ "$RUNNER_OS" == "macOS"]; then
            export SYSTEM_VERSION_COMPAT=1
            sudo rm -rf /Library/Developer/CommandLineTools
            sudo xcode-select --install
            python3 -m pip install ./
         else
            python3 -m pip install ./
         fi
    - name: Set up R manually (with retry)
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 15
        max_attempts: 3
        retry_on: error
        command: |
          sudo apt-get update
          sudo apt-get install -y r-base
          mkdir -p ~/R/library
          echo 'R_LIBS_USER="~/R/library"' > ~/.Renviron
          R --version

    - name: Set up R dependencies (with retry)
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_on: error
        command: |
          Rscript -e 'install.packages("remotes", repos="https://cloud.r-project.org", lib="~/R/library")'
          Rscript -e 'remotes::install_local("circtools/contrib/circtest", lib="~/R/library")'
          Rscript -e 'remotes::install_local("circtools/contrib/primex", lib="~/R/library")'

    - name: Fix zcat on macOS
      if: runner.os == 'macOS'
      run: |
        sudo ln -sf $(which gzcat) /usr/local/bin/zcat
      
    - name: Checking library loading
      run: Rscript -e 'library(primex)'
    - name: Check if circtools starts
      run: |
         circtools --version
         which circtools

    - name: Install bioinformatics dependencies (bedtools, pblat, samtools)
      run: |
        set -euxo pipefail

        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y make g++ zlib1g-dev wget samtools

          # bedtools 2.31.1
          wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz
          tar -xzf bedtools-2.31.1.tar.gz
          cd bedtools2
          make -j4
          sudo cp bin/* /usr/local/bin/
          cd ..

          # pblat (parallel BLAT)
          git clone --depth=1 https://github.com/icebert/pblat.git
          cd pblat
          make
          sudo cp pblat /usr/local/bin/
          cd ..

        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew update
          brew install make gcc wget zlib samtools

          # bedtools 2.31.1
          wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz
          tar -xzf bedtools-2.31.1.tar.gz
          cd bedtools2
          make -j4
          sudo cp bin/* /usr/local/bin/
          cd ..

          # pblat (needs to be built manually, no brew formula anymore)
          git clone --depth=1 https://github.com/icebert/pblat.git
          cd pblat
          make
          sudo cp pblat /usr/local/bin/
          cd ..

        else
          echo "Unsupported OS: $RUNNER_OS" >&2
          exit 1
        fi

    - name: Unpack test dataset
      run: |
        tar xvf ./tests/data/circtools_example.tar.bz2
        cd circtools_example
        if [ -f genome.fa.gz ]; then gunzip -f genome.fa.gz; fi
        if [ -f annotation.gtf.gz ]; then gunzip -f annotation.gtf.gz; fi
        ls -lh

    - name: Subsample nanopore data
      run: |
        cd circtools_example
        # Copy human nanopore dataset from repo
        cp ../tests/data/human_nanopore.fastq.gz .
        # Extract first 1M reads (4M lines)
        zcat human_nanopore.fastq.gz | head -n 4000000 | gzip > human_nanopore_1M.fastq.gz
        ls -lh human_nanopore_1M.fastq.gz


    - name: Download reference data (nanopore)
      run: |
        cd circtools_example
        mkdir -p reference
        circtools nanopore \
          -d \
          -R reference \
          -C hg38

    - name: Run circtools nanopore (pip)
      run: |
        cd circtools_example
        mkdir -p nanopore_output
        circtools nanopore \
          -r \
          -s human_nanopore_1M.fastq.gz \
          -R reference \
          -C hg38 \
          -O nanopore_output/ \
          --threads 16

    - name: Checking generated output against master output
      run: |
         cd circtools_example
         cd nanopore_output
         ls -la
         wc -l *
          if [ "$RUNNER_OS" = "Linux" ]; then
            MASTER_DIR="../nanopore_master"
            diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
            sha1sum -c "$MASTER_DIR/sha1sums.txt"
          elif [ "$RUNNER_OS" = "macOS" ] && [ "${{ matrix.os }}" = "macos-13" ]; then
            MASTER_DIR="../nanopore_master"
            diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
            shasum -a 1 -c "$MASTER_DIR/sha1sums.txt"
          elif [ "$RUNNER_OS" = "macOS" ]; then
            MASTER_DIR="../nanopore_master"
            diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
            shasum -a 1 -c "$MASTER_DIR/sha1sums.txt"
          else
            echo "Unsupported OS: $RUNNER_OS" >&2
            exit 1
          fi

