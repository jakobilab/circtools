name: circtools nanopore (pip)

on:
  push:

concurrency:
  group: ci-tests-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Main:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-13, macos-15, ubuntu-22.04, ubuntu-24.04 ]
        R: ['4.4.0', '4.5.1']
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    name: R ${{ matrix.R }} | Python ${{ matrix.python-version }} | ${{ matrix.os }}
    steps:
    - name: Create files
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: ''

    - name: Updating setuptools
      run: |
        python3 -m pip install -U pip setuptools

    - name: Installing circtools & Python dependencies
      run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y \
                make g++ zlib1g-dev \
                libblas-dev libatlas-base-dev liblapack-dev \
                libcurl4-openssl-dev libssl-dev libxml2-dev \
                libfontconfig1-dev libharfbuzz-dev libfribidi-dev \
                libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev
            python3 -m pip install ./
         fi
         if [ "$RUNNER_OS" == "macOS"]; then
            export SYSTEM_VERSION_COMPAT=1
            sudo rm -rf /Library/Developer/CommandLineTools
            sudo xcode-select --install
            python3 -m pip install ./
         else
            python3 -m pip install ./
         fi


    - name: Check if circtools starts
      run: |
        circtools --version
        which circtools


    - name: Install bioinformatics dependencies (bedtools, pblat, samtools, pybedtools)
      run: |
        set -euxo pipefail

        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y make g++ zlib1g-dev wget samtools libssl-dev

          # bedtools 2.31.1
          wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz
          tar -xzf bedtools-2.31.1.tar.gz
          cd bedtools2
          make -j4
          sudo cp bin/* /usr/local/bin/
          cd ..

        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew update
          brew install make gcc wget zlib samtools openssl@3
          brew install gnu-sed grep
          sudo ln -sf "$(which gsed)" /usr/local/bin/sed
          sudo ln -sf "$(which ggrep)" /usr/local/bin/grep

          # Resolve Homebrew prefixes (works for both Intel & Apple Silicon)
          OPENSSL_PREFIX="$(brew --prefix openssl@3)"
          ZLIB_PREFIX="$(brew --prefix zlib)"

          export CPPFLAGS="-I${OPENSSL_PREFIX}/include -I${ZLIB_PREFIX}/include ${CPPFLAGS:-}"
          export LDFLAGS="-L${OPENSSL_PREFIX}/lib -L${ZLIB_PREFIX}/lib ${LDFLAGS:-}"
          export PKG_CONFIG_PATH="${OPENSSL_PREFIX}/lib/pkgconfig:${ZLIB_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
          export LIBRARY_PATH="${OPENSSL_PREFIX}/lib:${ZLIB_PREFIX}/lib:${LIBRARY_PATH:-}"

          # bedtools 2.31.1
          wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz
          tar -xzf bedtools-2.31.1.tar.gz
          cd bedtools2
          make -j4
          sudo cp bin/* /usr/local/bin/
          cd ..

          if [ "${{ matrix.os }}" = "macos-15" ]; then
            echo "Building pblat for Apple Silicon via Rosetta (Intel Homebrew)"

            # Install Rosetta (needed for x86_64 builds)
            softwareupdate --install-rosetta --agree-to-license

            # Ensure Intel Homebrew exists
            if [ ! -x /usr/local/bin/brew ]; then
              echo "Installing Intel Homebrew under /usr/local"
              arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi

            # Install Intel OpenSSL + zlib
            arch -x86_64 /usr/local/bin/brew install openssl@3 zlib

            # Resolve Intel Homebrew prefixes
            OPENSSL_PREFIX="$(arch -x86_64 /usr/local/bin/brew --prefix openssl@3)"
            ZLIB_PREFIX="$(arch -x86_64 /usr/local/bin/brew --prefix zlib)"

            export CPPFLAGS="-I${OPENSSL_PREFIX}/include -I${ZLIB_PREFIX}/include ${CPPFLAGS:-}"
            export LDFLAGS="-L${OPENSSL_PREFIX}/lib -L${ZLIB_PREFIX}/lib ${LDFLAGS:-}"
            export PKG_CONFIG_PATH="${OPENSSL_PREFIX}/lib/pkgconfig:${ZLIB_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH:-}"
            export LIBRARY_PATH="${OPENSSL_PREFIX}/lib:${ZLIB_PREFIX}/lib:${LIBRARY_PATH:-}"

          else
            echo "Building pblat from source on macOS Intel"
            git clone --depth=1 https://github.com/wjmellon/pblat pblat-src
            cd pblat-src
            make
            sudo cp pblat /usr/local/bin/ || sudo cp pblat_bin /usr/local/bin/pblat
            cd ..
          fi

        else
          echo "Unsupported OS: $RUNNER_OS" >&2
          exit 1
        fi




    - name: Fix zcat on macOS
      if: runner.os == 'macOS'
      run: |
        # Make zcat an alias to gunzip -c
        echo '#!/bin/bash' | sudo tee /usr/local/bin/zcat
        echo 'exec gunzip -c "$@"' | sudo tee -a /usr/local/bin/zcat
        sudo chmod +x /usr/local/bin/zcat
        export PATH="/usr/local/bin:$PATH"
        which zcat
        zcat --version || true





    - name: Unpack test dataset
      run: |
        tar xvf ./tests/data/circtools_example.tar.bz2
        cd circtools_example
        if [ -f genome.fa.gz ]; then gunzip -f genome.fa.gz; fi
        if [ -f annotation.gtf.gz ]; then gunzip -f annotation.gtf.gz; fi
        ls -lh

    - name: Subsample nanopore data
      run: |
        cd circtools_example
        cp ../tests/data/human_nanopore.fastq.gz .
        if [ "$RUNNER_OS" = "macOS" ]; then
          gzcat human_nanopore.fastq.gz | head -n 4000000 | gzip > human_nanopore_1M.fastq.gz
        else
          zcat human_nanopore.fastq.gz | head -n 4000000 | gzip > human_nanopore_1M.fastq.gz
        fi
        ls -lh human_nanopore_1M.fastq.gz


    - name: Download reference data (nanopore)
      run: |
        cd circtools_example
        mkdir -p reference
        circtools nanopore \
          -d \
          -R reference \
          -C hg38

    - name: Run circtools nanopore (pip)
      run: |
        cd circtools_example
        mkdir -p nanopore_output
        circtools nanopore \
          -r \
          -s human_nanopore_1M.fastq.gz \
          -R reference \
          -C hg38 \
          -O nanopore_output/ \
          --threads 16
    
    - name: Upload output artifact
      uses: actions/upload-artifact@v4
      with:
        name: circtools-nanopore-${{ matrix.os }}-R${{ matrix.R }}-py${{ matrix.python-version }}
        path: |
          circtools_example/nanopore_output/human_nanopore_1M.circRNA_candidates.annotated.txt



    - name: Checking generated output against master output
      run: |
        cd circtools_example
        cd nanopore_output
        ls -la
        wc -l *
        if [ "$RUNNER_OS" = "Linux" ]; then
          MASTER_DIR="../nanopore_master"
          diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
          sha1sum -c "$MASTER_DIR/sha1sums.txt"
        elif [ "$RUNNER_OS" = "macOS" ] && [ "${{ matrix.os }}" = "macos-13" ]; then
          MASTER_DIR="../nanopore_master_mac_amd"
          diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
          shasum -a 1 -c "$MASTER_DIR/sha1sums.txt"
        elif [ "$RUNNER_OS" = "macOS" ]; then
          MASTER_DIR="../nanopore_master_mac"
          diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
          shasum -a 1 -c "$MASTER_DIR/sha1sums.txt"
        else
          echo "Unsupported OS: $RUNNER_OS" >&2
          exit 1
        fi
