name: circtools nanopore (pip)

on:
  push:
  pull_request:

concurrency:
  group: ci-tests-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Main:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-13, macos-15, ubuntu-22.04, ubuntu-24.04 ]
        R: ['4.4.0', '4.5.1']
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    name: R ${{ matrix.R }} | Python ${{ matrix.python-version }} | ${{ matrix.os }}
    steps:
    - name: Create files
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Updating setuptools
      run: |
        python3 -m pip install -U pip setuptools

    - name: Installing circtools & Python dependencies
      run: |
         if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y \
                make g++ zlib1g-dev \
                libblas-dev libatlas-base-dev liblapack-dev \
                libcurl4-openssl-dev libssl-dev libxml2-dev \
                libfontconfig1-dev libharfbuzz-dev libfribidi-dev \
                libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev
            python3 -m pip install ./
         fi
         if [ "$RUNNER_OS" == "macOS"]; then
            export SYSTEM_VERSION_COMPAT=1
            sudo rm -rf /Library/Developer/CommandLineTools
            sudo xcode-select --install
            python3 -m pip install ./
         else
            python3 -m pip install ./
         fi


    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ matrix.R }}

    - name: Install R dependencies (with retry, prefer binaries)
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 40  
        max_attempts: 3
        retry_on: error
        command: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            UBUNTU_VERSION=$(lsb_release -cs)  # e.g. jammy, noble
            echo "options(repos = c(RSPM = sprintf('https://packagemanager.posit.co/cran/__linux__/%s/latest', '$UBUNTU_VERSION')))" >> ~/.Rprofile
          fi

          Rscript circtools/scripts/install_R_dependencies.R
      env:
        GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    - name: Checking library loading
      run: Rscript -e 'library(primex)'

    - name: Check if circtools starts
      run: |
        circtools --version
        which circtools

    - name: Install bioinformatics dependencies (bedtools, pblat, samtools, pybedtools)
      run: |
        set -euxo pipefail

        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y make g++ zlib1g-dev wget samtools

          # bedtools 2.31.1
          wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz
          tar -xzf bedtools-2.31.1.tar.gz
          cd bedtools2
          make -j4
          sudo cp bin/* /usr/local/bin/
          cd ..

          # pblat (parallel BLAT)
          git clone --depth=1 https://github.com/icebert/pblat.git
          cd pblat
          make
          sudo cp pblat /usr/local/bin/
          cd ..

          # pybedtools (manual build)
          git clone https://github.com/daler/pybedtools.git
          cd pybedtools
          python3 -m pip install cython
          python3 setup.py cythonize
          python3 setup.py install
          cd ..

        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew update
          brew install make gcc wget zlib samtools openssl@3

          # Ensure consistent flags
          export OPENSSL_PREFIX="$(brew --prefix openssl@3)"
          export ZLIB_PREFIX="$(brew --prefix zlib)"

          export CFLAGS="-I$OPENSSL_PREFIX/include -I$ZLIB_PREFIX/include"
          export CPPFLAGS="$CFLAGS"
          export LDFLAGS="-L$OPENSSL_PREFIX/lib -L$ZLIB_PREFIX/lib"
          export PKG_CONFIG_PATH="$OPENSSL_PREFIX/lib/pkgconfig:$ZLIB_PREFIX/lib/pkgconfig"

          # bedtools 2.31.1
          wget https://github.com/arq5x/bedtools2/releases/download/v2.31.1/bedtools-2.31.1.tar.gz
          tar -xzf bedtools-2.31.1.tar.gz
          cd bedtools2
          make -j4
          sudo cp bin/* /usr/local/bin/
          cd ..

          # pblat (with OpenSSL headers/libs)
          git clone --depth=1 https://github.com/icebert/pblat.git
          cd pblat
          make \
            CFLAGS="$CFLAGS" \
            LDFLAGS="$LDFLAGS" \
            LIBS="-L$OPENSSL_PREFIX/lib -lssl -lcrypto -lz -lpthread -lm"
          sudo cp pblat /usr/local/bin/
          cd ..

        else
          echo "Unsupported OS: $RUNNER_OS" >&2
          exit 1
        fi



    - name: Unpack test dataset
      run: |
        tar xvf ./tests/data/circtools_example.tar.bz2
        cd circtools_example
        if [ -f genome.fa.gz ]; then gunzip -f genome.fa.gz; fi
        if [ -f annotation.gtf.gz ]; then gunzip -f annotation.gtf.gz; fi
        ls -lh

    - name: Subsample nanopore data
      run: |
        cd circtools_example
        cp ../tests/data/human_nanopore.fastq.gz .
        if [ "$RUNNER_OS" = "macOS" ]; then
          gzcat human_nanopore.fastq.gz | head -n 4000000 | gzip > human_nanopore_1M.fastq.gz
        else
          zcat human_nanopore.fastq.gz | head -n 4000000 | gzip > human_nanopore_1M.fastq.gz
        fi
        ls -lh human_nanopore_1M.fastq.gz


    - name: Download reference data (nanopore)
      run: |
        cd circtools_example
        mkdir -p reference
        circtools nanopore \
          -d \
          -R reference \
          -C hg38

    - name: Run circtools nanopore (pip)
      run: |
        cd circtools_example
        mkdir -p nanopore_output
        circtools nanopore \
          -r \
          -s human_nanopore_1M.fastq.gz \
          -R reference \
          -C hg38 \
          -O nanopore_output/ \
          --threads 16
    
    - name: Upload output artifact
      uses: actions/upload-artifact@v4
      with:
        name: circtools-nanopore-${{ matrix.os }}-R${{ matrix.R }}-py${{ matrix.python-version }}
        path: |
          circtools_example/nanopore_output/human_nanopore_1M.circRNA_candidates.annotated.txt



    - name: Checking generated output against master output
      run: |
        cd circtools_example
        cd nanopore_output
        ls -la
        wc -l *
        if [ "$RUNNER_OS" = "Linux" ]; then
          MASTER_DIR="../nanopore_master"
          diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
          sha1sum -c "$MASTER_DIR/sha1sums.txt"
        elif [ "$RUNNER_OS" = "macOS" ] && [ "${{ matrix.os }}" = "macos-13" ]; then
          MASTER_DIR="../nanopore_master"
          diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
          shasum -a 1 -c "$MASTER_DIR/sha1sums.txt"
        elif [ "$RUNNER_OS" = "macOS" ]; then
          MASTER_DIR="../nanopore_master"
          diff human_nanopore_1M.circRNA_candidates.annotated.txt "$MASTER_DIR/human_nanopore_1M.circRNA_candidates.annotated.txt"
          shasum -a 1 -c "$MASTER_DIR/sha1sums.txt"
        else
          echo "Unsupported OS: $RUNNER_OS" >&2
          exit 1
        fi
